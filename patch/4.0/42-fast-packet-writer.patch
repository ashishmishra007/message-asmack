--- org/jivesoftware/smack/tcp/PacketWriter.java	2015-01-05 01:02:20.296303026 -0800
+++ ../../../../src/asmack_4_0_4/src/org/jivesoftware/smack/tcp/PacketWriter.java	2014-12-22 19:29:45.974406205 -0800
@@ -20,6 +20,7 @@
 import org.jivesoftware.smack.SmackException.NotConnectedException;
 import org.jivesoftware.smack.packet.Packet;
 import org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown;
+import org.jivesoftware.smack.util.XmlStringBuilder;
 
 import java.io.IOException;
 import java.io.Writer;
@@ -160,11 +161,15 @@
             while (!done && (writerThread == thisThread)) {
                 Packet packet = nextPacket();
                 if (packet != null) {
-                    writer.write(packet.toXML().toString());
-
-                    if (queue.isEmpty()) {
-                        writer.flush();
-                    }
+                  CharSequence packetXml = packet.toXML();
+                  if (packetXml instanceof XmlStringBuilder) {
+                    ((XmlStringBuilder) packetXml).write(writer);
+                  } else {
+                    writer.write(packetXml.toString());
+                  }
+                  if (queue.isEmpty()) {
+                      writer.flush();
+                  }
                 }
             }
             // Flush out the rest of the queue. If the queue is extremely large, it's possible
@@ -173,7 +178,12 @@
             try {
                 while (!queue.isEmpty()) {
                     Packet packet = queue.remove();
-                    writer.write(packet.toXML().toString());
+                    CharSequence packetXml = packet.toXML();
+                    if (packetXml instanceof XmlStringBuilder) {
+                      ((XmlStringBuilder) packetXml).write(writer);
+                    } else {
+                      writer.write(packetXml.toString());
+                    }
                 }
                 writer.flush();
             }
--- org/jivesoftware/smack/util/LazyStringBuilder.java	2015-01-05 01:02:20.428303028 -0800
+++ ../../../../src/asmack_4_0_4/src/org/jivesoftware/smack/util/LazyStringBuilder.java	2015-01-05 01:24:55.000324982 -0800
@@ -16,6 +16,9 @@
  */
 package org.jivesoftware.smack.util;
 
+import java.io.Closeable;
+import java.io.IOException;
+import java.io.Writer;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -105,4 +108,55 @@
         }
         return cache;
     }
+    
+    // Magnet extension.
+    public void write(Writer writer) throws IOException {
+      if (cache != null) {
+        // Use cached xml if available
+        writer.write(toString());
+        return;
+      }
+      // Recursively to write them out in chunks.
+      StringBuilder sb = new StringBuilder(8192);
+      for (CharSequence csq : list) {
+        if (csq instanceof XmlStringBuilder) {
+          // Flush any buffered fragments first.
+          if (sb.length() > 0) {
+            writer.write(sb.toString());
+            sb.setLength(0);
+          }
+          // Recursively write the fragments.
+          ((XmlStringBuilder) csq).write(writer);
+        } else {
+          int csqLen = csq.length();
+          if ((sb.length() + csqLen) <= 8192) {
+            // Buffer a small fragment.
+            sb.append(csq);
+          } else {
+            // Flush the buffered fragments.
+            if (sb.length() > 0) {
+              writer.write(sb.toString());
+              sb.setLength(0);
+            }
+            int start = 0;
+            // Write a large fragment directly in 8K chunks.
+            while (csqLen > 0) {
+              int len = Math.min(csqLen, 8192);
+              writer.write(csq.subSequence(start, start+len).toString());
+              start += len;
+              csqLen -= len;
+            }
+          }
+        }
+        // Is it a file based CharSequence?
+        if (csq instanceof Closeable) {
+          ((Closeable) csq).close();
+        }
+      }
+      // Flush any remaining buffered fragments.
+      if (sb.length() > 0) {
+        writer.write(sb.toString());
+        sb.setLength(0);
+      }
+    }
 }
--- org/jivesoftware/smack/util/XmlStringBuilder.java	2015-01-05 01:02:20.400303028 -0800
+++ ../../../../src/asmack_4_0_4/src/org/jivesoftware/smack/util/XmlStringBuilder.java	2014-12-21 23:33:37.075298975 -0800
@@ -16,6 +16,9 @@
  */
 package org.jivesoftware.smack.util;
 
+import java.io.IOException;
+import java.io.Writer;
+
 import org.jivesoftware.smack.packet.PacketExtension;
 
 public class XmlStringBuilder implements Appendable, CharSequence {
@@ -240,4 +243,9 @@
     public int hashCode() {
         return toString().hashCode();
     }
+    
+    // Magnet extension.
+    public void write(Writer writer) throws IOException {
+      sb.write(writer);
+    }
 }
